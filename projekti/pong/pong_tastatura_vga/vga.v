
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module vga(
	
	//////////// VGA //////////
	output		          	   	VGA_BLANK_N,
	output		    reg [7:0]		VGA_B,
	output		            		VGA_CLK,
	output		    reg [7:0]		VGA_G,
	output		    reg      		VGA_HS,
	output		    reg [7:0]		VGA_R,
	output		             		VGA_SYNC_N,
	output		    reg      		VGA_VS,
	
	
	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//  GPIO za matrix
	output			  [15:0]		GPIO_0,
	// preskacemo 9

	//tastatura
	input 		          		PS2_CLK,
	input 		          		PS2_DAT
	//
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

// pong/keyboard

//	
	// pong stvari
	wire [7:0] redovi_pong;
	wire [7:0] kolone_pong;
	
	//redovi, pozitivni, mozda increment
	assign GPIO_0[8]  = redovi_pong[0];
	assign GPIO_0[13] = redovi_pong[1];
	assign GPIO_0[7]  = redovi_pong[2];
	assign GPIO_0[11] = redovi_pong[3];
	assign GPIO_0[0]  = redovi_pong[4];
	assign GPIO_0[6]  = redovi_pong[5];
	assign GPIO_0[1]  = redovi_pong[6];
	assign GPIO_0[4]  = redovi_pong[7];

	
	// kolone, negativne;
	assign GPIO_0[12] = kolone_pong[0];
	assign GPIO_0[2]  = kolone_pong[1];
	assign GPIO_0[3]  = kolone_pong[2];
	assign GPIO_0[9]  = kolone_pong[3];
	assign GPIO_0[5]  = kolone_pong[4];
	assign GPIO_0[10] = kolone_pong[5];
	assign GPIO_0[14] = kolone_pong[6];
	assign GPIO_0[15] = kolone_pong[7];
	
	wire [15:0] sve;
	wire [3:0] x;
	wire [3:0] y;
	wire [3:0] pom1;
	wire [3:0] pom2;
	wire [3:0] smer;
	wire [3:0] poeni1;
	wire [3:0] poeni2;

	//assign y = 0; // prva kolona samo
	wire [3:0] x_b,y_b;
	wire [3:0] game;
	wire [3:0] game2;
	
	// tastatura
	wire [123:0] keyreg;
	wire [7:0] buttons;
	
	assign redovi_pong = sve[15:8];
	assign kolone_pong = sve[7:0];
	wire first;
	// kraj pong stvari
	wire [32:0] sekunda;
//



	one_sec sek(CLOCK_50, sekunda);
	multipleks mp(CLOCK_50, sve[15:0], x,y);
	ps2parse tastature(PS2_CLK, PS2_DAT, buttons, keyreg);
	keys dugmici(sekunda,pom1,pom2,buttons,game,first,game2);
	rand rnd(CLOCK_50,KEY[0],smer);
	ball bl(sekunda,smer,x_b,y_b,pom1,pom2,poeni1,poeni2,game,first,game2);
	red_sweep rd(CLOCK_50,pom1,pom2,x,y,x_b,y_b);

	hex hex1(poeni1, HEX0[6:0]);
   hex hex2(poeni2,  HEX5[6:0]);
	
//////

	


	reg [20:0] vga_brojac  = 0;
	reg [10:0] vga_bhrojac = 0;
	reg [10:0] vga_broyac = 0;
	reg [8:0] pokret   = 0;
	reg [1:0] k  = 1;
	reg [8:0] g  = 0;
	
	// varijable za pamcenje lokacije kvadrata
//	reg [9:0] x  = 50;
//	reg [9:0] y  = 50;
//	reg [1:0] kx = 1;
//	reg [9:0] ky = 1040;
	reg [8:0] width = 50;
	reg [8:0] height = 50*1040;

//=======================================================
//  Structural coding
//=======================================================

	// prvi deo
	// postavljanje VGA CLOCK_50-a
	
	assign VGA_CLK = CLOCK_50;
	assign VGA_SYNC_N = 0;
	assign VGA_BLANK_N = 1;
	
	

	
	// ekran jednobojan
	// namestiti timing za horizontalni i vertikalni sync
	
	// CLOCK_50 je 50mhz => svaki puls traje 0.02 * 10^(-6)s
	always @(posedge CLOCK_50) begin
		vga_brojac = vga_brojac + 1;
		
		// TODO: smisliti inteligentniji nacin da se prati dokle smo stigli sa iscrtavanjem.
		//       Deljenje i moduo su izuzetno skupi, pa bi bilo lepo da se izbegnu ukoliko
		//       je moguce
		if (vga_brojac == 692640) begin
			vga_brojac = 0;
			if (pokret > 255 || pokret < 0) begin
				k = k * (-1);
			end
			pokret = pokret + k;
			
		end
		
		// 0.02 * vga_brojac => proteklo vreme do sada u us [MAX = 1s]
		
		// frekvencija osvezavanja ekrana je 72Hz
		// rezolucija je 800 x 600
		
		// skupo, bilo bi dobro smisliti nesto bolje
		// horizontalni brojac, bhrojac definise trenutnu "Y" koordinatu na ekranu
		vga_bhrojac = vga_brojac % 1040;
		vga_broyac = vga_brojac / 600;

		
		// HORIZONTAL TIMING
		if (vga_bhrojac >= 0 && vga_bhrojac < 800) begin
			
			// visible area
			
			// iscrtavanje animirane pozadine
			VGA_R = 8'd250;
			g = (255 - (vga_bhrojac >> 2) + pokret) ;
			if (g > 255 && g <= 510) begin
				g = 510 - g;
			end
			else begin
				if (g > 510) begin
					g = g - 510;
				end
			end
			VGA_G = g;
			VGA_B = 8'd80;
			
			if (vga_bhrojac >= 44 && vga_bhrojac <= 556 && vga_broyac > 144 && vga_broyac <= 656) begin
				
				VGA_R = 8'd0;
				VGA_G = 8'd0;
				VGA_B = 8'd0;
				
			end
			
			//x y
			if ( vga_bhrojac >= (y * 64)+44 &&  vga_bhrojac <= ((y+1) * 64)+44  && vga_broyac >= ((x * 64)+144) &&  vga_broyac <= ((x+1) * 64)+144 )
			begin
				VGA_R = 8'hff;
				VGA_G = 8'hff;
				VGA_B = 8'hff;
			end
			
			// if ( vga_bhrojac >= // ovu liniju smo krenuli da kucamo ali je zapravo 
			
			
		end
		
		
		// ne dirati nadalje VGA boilerplate sranja
		if (vga_bhrojac >= 800 && vga_bhrojac < 856) begin
			// front porch
			
			VGA_R = 8'd0;
			VGA_G = 8'd0;
			VGA_B = 8'd0;
		end
		if(vga_bhrojac >= 856 && vga_bhrojac < 976) begin
			// sync pulse
			
			// active low => 0 = ON
			VGA_HS = 1;
		end
		if (vga_bhrojac >= 976 && vga_bhrojac < 1040) begin
			// back porch 
			VGA_HS = 0;
			
			VGA_R = 0;
			VGA_G = 0;
			VGA_B = 0;
		end
		
		
		// VERTICAL TIMING
		if (vga_brojac >= 0 && vga_brojac < 624000) begin
			// visible area
		end
		if (vga_brojac >= 624000 && vga_brojac < 662480) begin
			// front porch
		end
		if (vga_brojac >= 662480 && vga_brojac < 668720) begin
			// sync pulse
			
			// active low => 0 = ON
			VGA_VS = 1;
		end
		if (vga_brojac >= 668720 && vga_brojac < 692640) begin
			// back porch
			VGA_VS = 0;
		end
	end

endmodule