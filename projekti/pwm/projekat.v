
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module projekat(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,
	output							osc,

	//////////// SW //////////
	input 		     [9:0]		SW,
	input 							sig

);


//=======================================================
//  REG/WIRE declarations
//=======================================================

	reg [31:0] frekvencija = 1000000;
	reg [31:0] fr;
	reg [31:0] duty;
	reg [31:0] duty_cycle = 500000;
	reg [31:0] vr=100000;
	reg [31:0] brojac1 = 0;
	reg [31:0] brojac2 = 0;
	reg provera=0;
	reg d0 = 0;
	reg d1 = 0;
	reg d2 = 0;
	reg d3 = 0;
	reg dfr = 0;
	reg tok = 0;

//=======================================================
//  Structural coding
//=======================================================

always @ (posedge CLOCK_50) 
begin
	if (SW[9]) begin   //ovde kod za dekoder
	   brojac2<=0;
		if(tok) begin
		brojac1 <= brojac1+1;
		end
		if (sig && (dfr==0)) begin
			if(tok) begin
			fr<=brojac1+1;
			end
			dfr<=1;
			brojac1<=0;
			tok<=1;
			end
			
		if (!sig && (dfr==1)) begin
			dfr<=0;
			duty<=brojac1;
			end
		
		
	end
	if (!SW[9]) begin   //ovde kod za enkoder
	   tok<=0;
		dfr<=0;
		if(KEY[0] && (d0==0) && (duty_cycle+vr<frekvencija)) begin  
			duty_cycle <= duty_cycle + vr;
			d0 <= 1;
		end
		else if (KEY[0] && (d0==0) && (duty_cycle+vr>=frekvencija))begin
			duty_cycle <= frekvencija;
			d0 <= 1;
		end
		if(!KEY[0] && (d0==1)) begin
			d0 <= 0;
		end
		if(KEY[1] && (d1==0) && (duty_cycle > vr)) begin
			duty_cycle <= duty_cycle - vr;
			d1 <= 1;
		end
		else if(KEY[1] && (d1==0) && (duty_cycle <= vr)) begin
			duty_cycle <= 0;
			d1 <= 1;
		end
		if(!KEY[1] && (d1==1)) begin
			d1 <= 0;
		end 
		if(KEY[2] && (d2==0)) begin
			frekvencija<=frekvencija+vr;
			d2 <= 1;
		end
		if(!KEY[2] && (d2==1)) begin
			d2 <= 0;
		end
		if(KEY[3] && (d3==0) && (frekvencija-vr>duty_cycle)) begin
			frekvencija<=frekvencija-vr;
			d3 <= 1;
		end
		if(!KEY[3] && (d3==1)) begin
			d3 <= 0;
		end   
		if(SW[0])begin
			brojac2 <= brojac2 + 1;
			
			if(brojac2>frekvencija) begin
				brojac2<=0;
				provera<=0;
			end
			
			else begin
			
				if(brojac2>duty_cycle) begin
					provera<=1;
				end
				
				else begin
					provera<=0;
				end	
			end
		end
		else begin
			brojac2 <= brojac2 + 1;
			if(brojac2>frekvencija) begin
				brojac2<=0;
				provera<=!provera;
			end
		end
	end
end
assign LEDR = (SW[9] ? fr[9:0] : {provera, LEDR[8:1]});
assign osc = provera;
endmodule 